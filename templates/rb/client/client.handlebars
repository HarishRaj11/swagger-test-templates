module Public
  class {{ClientClass}} < PublicAPIClient
    public_class_method :new

    def initialize(params)
      super(params)
    end

    # Method to {{clientClassDescription}}
    # @param [Object] includes : the parameter to have include values in query
    def {{operationId}}(includes=nil,query=nil)
      api_params = Hash.new
      api_params[:end_point] = "/api/employees"
      api_params[:query] = {:includes => "#{includes}"} unless includes.nil?
      api_params[:query] = query  unless query.nil?
      api_params[:headers] = get_headers
      @api.get(api_params)
    end

    # Method to get an employee by id
    # @param [Int] id : the id of the employee
    # @param [Object] includes :the parameter to have include values in query
    def get_employee(id,includes=nil)
      api_params = Hash.new
      api_params[:end_point] = "/api/employees/#{id}"
      api_params[:query] = {:include => "#{includes}"} unless includes.nil?
      api_params[:headers] = get_headers
      @api.get(api_params)
    end

    # Method to create an employee
    # @param [Object] body : the request body hash map
    def create_employees(body=nil)
      api_params = Hash.new
      api_params[:end_point] = "/api/employees"
      api_params[:body] = body.to_json unless body.nil?
      api_params[:headers] = get_headers
      @api.post(api_params)
    end

    # Method to edit an employee
    # @param [int] id: the id of the employee
    # @param [Object] body: the request boy hash map
    def put_employees(id,body=nil)
      api_params = Hash.new
      api_params[:end_point] = "/api/employees/#{id}"
      api_params[:body] = body.to_json unless body.nil?
      api_params[:headers] = get_headers
      @api.put(api_params)
    end
  end
end
