require 'net/http'
require 'openssl'
require 'json'
require 'faker'
require 'yaml'

class API
  def initialize(username, password, base_url)
    @username = username
    @password = password
    @base_url = base_url
  end

  def send_get_request(endpoint)
    url = URI(endpoint)
    http = Net::HTTP.new(url.host, url.port)
    http.use_ssl = true
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE
    request = Net::HTTP::Get.new(url)

    request["accept"] = 'application/json'
    request["authorization"] = request.basic_auth @username, @password
    request["content-type"] = 'application/json'

    response = http.request(request)
    case response
    when Net::HTTPSuccess then
      return response.read_body
    else
      puts response.read_body
      return nil
    end
  end

  def send_post_request(endpoint, body)
    url = URI(endpoint)
    http = Net::HTTP.new(url.host, url.port)
    http.use_ssl = true
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE
    request = Net::HTTP::Post.new(url)

    request["accept"] = 'application/json'
    request["authorization"] = request.basic_auth @username, @password
    request["content-type"] = 'application/json'
    request.body = body
    response = http.request(request)
    case response
    when Net::HTTPSuccess then
      return response.read_body
    else
      puts response.read_body
      return nil
    end
  end

  def send_delete_request(endpoint)
    url = URI(endpoint)
    http = Net::HTTP.new(url.host, url.port)
    http.use_ssl = true
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE
    request = Net::HTTP::Delete.new(endpoint)
    request["Content-Type"] = 'application/json'
    request["Accept"] = 'application/json'
    request["Authorization"] = request.basic_auth @username, @password
    request["Cache-Control"] = 'no-cache'
    response = http.request(request)
    case response

    when Net::HTTPSuccess then
      return true
    else
      puts response.read_body
      return nil
    end
  end

  def send_put_request(endpoint, body = nil)
    url = URI(endpoint)
    http = Net::HTTP.new(url.host, url.port)
    http.use_ssl = true
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE
    request = Net::HTTP::Put.new(endpoint)
    request["Content-Type"] = 'application/json'
    request["Accept"] = 'application/json'
    request["Authorization"] = request.basic_auth @username, @password
    request["Cache-Control"] = 'no-cache'
    request.body = body unless (body.nil?)
    response = http.request(request)
    case response

    when Net::HTTPSuccess then
      return true
    else
      puts response.read_body
      return nil
    end
  end

  def apply_conditions(filterName, filterValue)
    filter_name  = "query_hash[0][condition]=#{filterName}"
    filter_type  = "query_hash[0][operator]=is"
    filter_value = "query_hash[0][value]=#{filterValue}"
    return filter_name + "&" + filter_type + "&" + filter_value
  end

  def handle_error(msg)
    puts msg
    return nil
  end
end
